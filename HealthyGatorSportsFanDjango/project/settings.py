"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/


# For accessing environment variables
import os
# For accessing environment variables from your .env file
from dotenv import load_dotenv
# Package to handle Heroku database configuration 
import dj_database_url
# For building paths
from pathlib import Path


# Load environment variables from the .env file
load_dotenv()


# Environment switch
RUN_ENV = os.getenv('RUN_ENV', 'local')


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')


# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG is true when RUN_ENV is set to local
DEBUG = RUN_ENV == 'local'


# Set ALLOWED_HOSTS based on RUN_ENV
if RUN_ENV == 'heroku':
    ALLOWED_HOSTS = ['healthygatorsportsfan-84ee3c84673f.herokuapp.com']
elif RUN_ENV == 'local':
    ALLOWED_HOSTS = [
        '127.0.0.1', 
        'localhost', 
        '192.168.68.124', 
        'b862-184-185-222-16.ngrok-free.app', 
        'sawfish-premium-unlikely.ngrok-free.app'
    ]


# Use the PORT environment variable set by Heroku.
# Gunicorn (see Procfile) uses the dynamic port assigned by Heroku, or defaults to 8000 if PORT is not set.
# Running 'python manage.py runserver 0.0.0.0:8000' explicitly sets the port for local testing,
# while 'python manage.py runserver' defaults to the fallback port (8000).
# PORT = os.getenv('PORT', '8000')


# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'app' if RUN_ENV == 'local' else 'HealthyGatorSportsFanDjango.app',
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
]


CORS_ALLOW_ALL_ORIGINS = True 


ROOT_URLCONF = 'project.urls' if RUN_ENV == 'local' else 'HealthyGatorSportsFanDjango.project.urls'
WSGI_APPLICATION = 'project.wsgi.application' if RUN_ENV == 'local' else 'HealthyGatorSportsFanDjango.project.wsgi.application'


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


# Database (local)
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

if RUN_ENV == 'local':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('DATABASE_NAME'),
            'USER': os.getenv('DATABASE_USER'),
            'PASSWORD': os.getenv('DATABASE_PASSWORD'),
        }
    }
else:
    DATABASES = {
        'default': dj_database_url.config(conn_max_age=600, ssl_require=True)
    }


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Directory where Django's collectstatic command gathers all static files (CSS, JS, images)
# Heroku requires this for serving static files in production.
# All static assets are collected into one location before deployment.
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') # HealthyGatorSportsFanDjango/staticfiles

STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CSRF_TRUSTED_ORIGINS = [
    'https://b862-184-185-222-16.ngrok-free.app',
    'https://normal-elegant-corgi.ngrok-free.app',
    'https://sawfish-premium-unlikely.ngrok-free.app',
    'https://healthygatorsportsfan-84ee3c84673f.herokuapp.com'
]
